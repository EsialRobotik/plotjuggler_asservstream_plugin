<?xml version='1.0' encoding='UTF-8'?>
<root>
 <tabbed_widget name="Main Window" parent="main_window">
  <Tab containers="1" tab_name="tab1">
   <Container>
    <DockSplitter orientation="-" count="1" sizes="1">
     <DockSplitter orientation="|" count="2" sizes="0.5;0.5">
      <DockSplitter orientation="-" count="3" sizes="0.333668;0.332663;0.333668">
       <DockArea name="">
        <plot flip_y="false" style="Lines" mode="TimeSeries" flip_x="false">
         <range bottom="-31.646191" top="1230.040151" left="7.493444" right="17.690000"/>
         <limitY/>
         <curve color="#1ac938" name="accDec/distance/InitialPosError"/>
         <curve color="#ff7f0e" name="accDec/distance/targetSpeed"/>
        </plot>
       </DockArea>
       <DockArea name="">
        <plot flip_y="false" style="Lines" mode="TimeSeries" flip_x="false">
         <range bottom="-31.658789" top="1230.040458" left="7.493444" right="17.690000"/>
         <limitY/>
         <curve color="#f14cc1" name="accDec/distance/Output"/>
         <curve color="#9467bd" name="accDec/distance/VelocityCompensated"/>
         <curve color="#17becf" name="accDec/distance/VelocityCompensation"/>
        </plot>
       </DockArea>
       <DockArea name="">
        <plot flip_y="false" style="Lines" mode="TimeSeries" flip_x="false">
         <range bottom="-13.110100" top="537.514529" left="7.493444" right="17.690000"/>
         <limitY/>
         <curve color="#bcbd22" name="accDec/distance/VelocityAtDecTime"/>
        </plot>
       </DockArea>
      </DockSplitter>
      <DockSplitter orientation="-" count="2" sizes="0.5;0.5">
       <DockArea name="DISTANCE goal">
        <plot flip_y="false" style="Lines" mode="TimeSeries" flip_x="false">
         <range bottom="-12.515581" top="512.774578" left="7.493444" right="17.690000"/>
         <limitY/>
         <curve color="#f14cc1" name="distance_regulator/accumulator"/>
         <curve color="#9467bd" name="distance_regulator/goal"/>
        </plot>
       </DockArea>
       <DockArea name="DISTANCE output">
        <plot flip_y="false" style="Lines" mode="TimeSeries" flip_x="false">
         <range bottom="-31.658789" top="1230.040458" left="7.493444" right="17.690000"/>
         <limitY/>
         <curve color="#17becf" name="distance_regulator/limited_output"/>
         <curve color="#bcbd22" name="distance_regulator/output"/>
        </plot>
       </DockArea>
      </DockSplitter>
     </DockSplitter>
    </DockSplitter>
   </Container>
  </Tab>
  <Tab containers="1" tab_name="tab2">
   <Container>
    <DockSplitter orientation="-" count="1" sizes="1">
     <DockArea name="Robot pos vs goal">
      <plot flip_y="false" style="Lines" mode="XYPlot" flip_x="false">
       <range bottom="-150.655043" top="149.848189" left="-12.513740" right="512.699130"/>
       <limitY/>
       <curve color="#d62728" name="odometry/[X;Y]" curve_x="odometry/X" curve_y="odometry/Y"/>
       <curve color="#1ac938" name="commandManager/[X;Y]" curve_x="commandManager/X" curve_y="commandManager/Y"/>
      </plot>
     </DockArea>
    </DockSplitter>
   </Container>
  </Tab>
  <currentTabIndex index="0"/>
 </tabbed_widget>
 <use_relative_time_offset enabled="1"/>
 <!-- - - - - - - - - - - - - - - -->
 <!-- - - - - - - - - - - - - - - -->
 <Plugins>
  <plugin ID="DataLoad CSV">
   <default delimiter="0" time_axis=""/>
  </plugin>
  <plugin ID="DataLoad ULog"/>
  <plugin ID="Esial Robotik asserv stream"/>
  <plugin ID="UDP Server"/>
  <plugin ID="WebSocket Server"/>
  <plugin ID="Fast Fourier Transform"/>
  <plugin ID="Quaternion to RPY"/>
  <plugin ID="Reactive Script Editor">
   <library code="--[[ Helper function to create a ScatterXY series from arrays.&#xa;&#xa; series_name: name of the created ScatterXY series&#xa; prefix:      prefix of the timeseries, before the index of the array&#xa; suffix_X:   suffix to complete the name of the series containing the X value.&#xa;             if [nil], the index of the array will be used.&#xa; suffix_Y:   suffix to complete the name of the series containing the Y value&#xa; timestamp:   usually the tracker_time variable&#xa;              &#xa; Example:&#xa; &#xa; Assuming we have multiple series in the form:&#xa; &#xa;   /trajectory/node.{N}/position/x&#xa;   /trajectory/node.{N}/position/y&#xa;   &#xa; where {N} is the index of the array (integer). We can create a reactive series from the array with:&#xa; &#xa;   CreateSeriesFromArray( &quot;my_trajectory&quot;, &quot;/trajectory/node&quot;,  &quot;position/x&quot;, &quot;position/y&quot;, tracker_time );&#xa;]]--&#xa;&#xa;function CreateSeriesFromArray( series_name, prefix, suffix_X, suffix_Y, timestamp )&#xa;  --- create a new series or overwite the previous one&#xa;  new_series = MutableScatterXY.new(series_name)&#xa;  &#xa;  --- Append points to new_series&#xa;  index = 0&#xa;  while(true) do&#xa;&#xa;    x = index;&#xa;    -- if not nil, get the X coordinate from a series&#xa;    if suffix_X ~= nil then &#xa;      series_x = TimeseriesView.find( string.format( &quot;%s.%d/%s&quot;, prefix, index, suffix_X) )&#xa;      if series_x == nil then break end&#xa;      x = series_x:atTime(timestamp)&#x9; &#xa;    end&#xa;    &#xa;    series_y = TimeseriesView.find( string.format( &quot;%s.%d/%s&quot;, prefix, index, suffix_Y) )&#xa;    if series_x == nil then break end &#xa;    y = series_y:atTime(timestamp)&#xa;    &#xa;    new_series:push_back(x,y)&#xa;    index = index+1&#xa;  end&#xa;end&#xa;"/>
   <scripts/>
  </plugin>
  <plugin ID="CSV Exporter"/>
  <plugin ID="Video Viewer">
   <config use_frame="true" curve_name="" video_file=""/>
  </plugin>
 </Plugins>
 <!-- - - - - - - - - - - - - - - -->
 <previouslyLoaded_Datafiles/>
 <previouslyLoaded_Streamer name="Esial Robotik asserv stream"/>
 <!-- - - - - - - - - - - - - - - -->
 <customMathEquations/>
 <snippets>
  <snippet name="1st_derivative">
   <global>var prevX = 0
var prevY = 0</global>
   <function></function>
   <linked_source></linked_source>
  </snippet>
  <snippet name="1st_order_lowpass">
   <global>var prevY = 0
var alpha = 0.1</global>
   <function></function>
   <linked_source></linked_source>
  </snippet>
  <snippet name="2D_velocity">
   <global>var prev_x = 0
var prev_y = 0
var prev_t = 0</global>
   <function></function>
   <linked_source></linked_source>
  </snippet>
  <snippet name="average_two_curves">
   <global></global>
   <function></function>
   <linked_source></linked_source>
  </snippet>
  <snippet name="dist">
   <global></global>
   <function></function>
   <linked_source></linked_source>
  </snippet>
  <snippet name="integral">
   <global>var integral = 0</global>
   <function></function>
   <linked_source></linked_source>
  </snippet>
  <snippet name="rad_to_deg">
   <global></global>
   <function></function>
   <linked_source></linked_source>
  </snippet>
  <snippet name="remove_offset">
   <global>var is_first = true
var first_value = 0</global>
   <function></function>
   <linked_source></linked_source>
  </snippet>
  <snippet name="yaw_from_quaternion">
   <global>// source: https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles

function quaternionToYaw(x, y, z, w)
{
  // yaw (z-axis rotation)
  t1 = 2.0 * (w * z + x * y);
  t2 = 1.0 - 2.0 * (y * y + z * z);
  yaw = Math.atan2(t1, t2);

  return yaw
}</global>
   <function></function>
   <linked_source></linked_source>
  </snippet>
 </snippets>
 <!-- - - - - - - - - - - - - - - -->
</root>

